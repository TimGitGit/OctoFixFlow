// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/commonModel.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CommonModel {
  public static partial class CommonModel
  {
    static readonly string __ServiceName = "commonModel.CommonModel";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.Firmware_file> __Marshaller_commonModel_Firmware_file = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.Firmware_file.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.Firmware_update_progress> __Marshaller_commonModel_Firmware_update_progress = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.Firmware_update_progress.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.Void> __Marshaller_commonModel_Void = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.Void.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.Network_info> __Marshaller_commonModel_Network_info = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.Network_info.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.switch_info_get> __Marshaller_commonModel_switch_info_get = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.switch_info_get.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.switch_info> __Marshaller_commonModel_switch_info = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.switch_info.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CommonModel.switch_result> __Marshaller_commonModel_switch_result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CommonModel.switch_result.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CommonModel.Firmware_file, global::CommonModel.Firmware_update_progress> __Method_Firmware_update = new grpc::Method<global::CommonModel.Firmware_file, global::CommonModel.Firmware_update_progress>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Firmware_update",
        __Marshaller_commonModel_Firmware_file,
        __Marshaller_commonModel_Firmware_update_progress);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CommonModel.Void, global::CommonModel.Network_info> __Method_Get_network_info = new grpc::Method<global::CommonModel.Void, global::CommonModel.Network_info>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get_network_info",
        __Marshaller_commonModel_Void,
        __Marshaller_commonModel_Network_info);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CommonModel.Void, global::CommonModel.switch_info_get> __Method_Get_switch_info = new grpc::Method<global::CommonModel.Void, global::CommonModel.switch_info_get>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get_switch_info",
        __Marshaller_commonModel_Void,
        __Marshaller_commonModel_switch_info_get);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CommonModel.switch_info, global::CommonModel.switch_result> __Method_Set_switch_info = new grpc::Method<global::CommonModel.switch_info, global::CommonModel.switch_result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Set_switch_info",
        __Marshaller_commonModel_switch_info,
        __Marshaller_commonModel_switch_result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CommonModel.CommonModelReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CommonModel</summary>
    [grpc::BindServiceMethod(typeof(CommonModel), "BindService")]
    public abstract partial class CommonModelBase
    {
      /// <summary>
      ///
      ///固件升级服务. 
      ///客户端传输 固件文件的二进制数据.
      ///服务器返回 升级进度和结果 流.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Firmware_update(global::CommonModel.Firmware_file request, grpc::IServerStreamWriter<global::CommonModel.Firmware_update_progress> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///获取移液机器人所有网络节点信息 服务器流 .
      ///服务器返回 移液机器人网络节点信息.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CommonModel.Network_info> Get_network_info(global::CommonModel.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CommonModel.switch_info_get> Get_switch_info(global::CommonModel.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CommonModel.switch_result> Set_switch_info(global::CommonModel.switch_info request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CommonModel</summary>
    public partial class CommonModelClient : grpc::ClientBase<CommonModelClient>
    {
      /// <summary>Creates a new client for CommonModel</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CommonModelClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CommonModel that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CommonModelClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CommonModelClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CommonModelClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      ///固件升级服务. 
      ///客户端传输 固件文件的二进制数据.
      ///服务器返回 升级进度和结果 流.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CommonModel.Firmware_update_progress> Firmware_update(global::CommonModel.Firmware_file request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Firmware_update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///固件升级服务. 
      ///客户端传输 固件文件的二进制数据.
      ///服务器返回 升级进度和结果 流.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CommonModel.Firmware_update_progress> Firmware_update(global::CommonModel.Firmware_file request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Firmware_update, null, options, request);
      }
      /// <summary>
      ///
      ///获取移液机器人所有网络节点信息 服务器流 .
      ///服务器返回 移液机器人网络节点信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.Network_info Get_network_info(global::CommonModel.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get_network_info(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取移液机器人所有网络节点信息 服务器流 .
      ///服务器返回 移液机器人网络节点信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.Network_info Get_network_info(global::CommonModel.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get_network_info, null, options, request);
      }
      /// <summary>
      ///
      ///获取移液机器人所有网络节点信息 服务器流 .
      ///服务器返回 移液机器人网络节点信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.Network_info> Get_network_infoAsync(global::CommonModel.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get_network_infoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///获取移液机器人所有网络节点信息 服务器流 .
      ///服务器返回 移液机器人网络节点信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.Network_info> Get_network_infoAsync(global::CommonModel.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get_network_info, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.switch_info_get Get_switch_info(global::CommonModel.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get_switch_info(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.switch_info_get Get_switch_info(global::CommonModel.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get_switch_info, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.switch_info_get> Get_switch_infoAsync(global::CommonModel.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get_switch_infoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.switch_info_get> Get_switch_infoAsync(global::CommonModel.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get_switch_info, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.switch_result Set_switch_info(global::CommonModel.switch_info request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Set_switch_info(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CommonModel.switch_result Set_switch_info(global::CommonModel.switch_info request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Set_switch_info, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.switch_result> Set_switch_infoAsync(global::CommonModel.switch_info request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Set_switch_infoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CommonModel.switch_result> Set_switch_infoAsync(global::CommonModel.switch_info request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Set_switch_info, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CommonModelClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CommonModelClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CommonModelBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Firmware_update, serviceImpl.Firmware_update)
          .AddMethod(__Method_Get_network_info, serviceImpl.Get_network_info)
          .AddMethod(__Method_Get_switch_info, serviceImpl.Get_switch_info)
          .AddMethod(__Method_Set_switch_info, serviceImpl.Set_switch_info).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CommonModelBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Firmware_update, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::CommonModel.Firmware_file, global::CommonModel.Firmware_update_progress>(serviceImpl.Firmware_update));
      serviceBinder.AddMethod(__Method_Get_network_info, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CommonModel.Void, global::CommonModel.Network_info>(serviceImpl.Get_network_info));
      serviceBinder.AddMethod(__Method_Get_switch_info, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CommonModel.Void, global::CommonModel.switch_info_get>(serviceImpl.Get_switch_info));
      serviceBinder.AddMethod(__Method_Set_switch_info, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CommonModel.switch_info, global::CommonModel.switch_result>(serviceImpl.Set_switch_info));
    }

  }
}
#endregion
