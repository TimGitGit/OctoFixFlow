// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/motorModule.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MotorModule {
  public static partial class MotorModule
  {
    static readonly string __ServiceName = "motorModule.MotorModule";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Motor_action_param> __Marshaller_motorModule_Motor_action_param = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Motor_action_param.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Motor_result> __Marshaller_motorModule_Motor_result = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Motor_result.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Motor_event_param> __Marshaller_motorModule_Motor_event_param = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Motor_event_param.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Void> __Marshaller_motorModule_Void = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Void.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Motor_transform> __Marshaller_motorModule_Motor_transform = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Motor_transform.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MotorModule.Motor_info> __Marshaller_motorModule_Motor_info = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MotorModule.Motor_info.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MotorModule.Motor_action_param, global::MotorModule.Motor_result> __Method_Motor_action = new grpc::Method<global::MotorModule.Motor_action_param, global::MotorModule.Motor_result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Motor_action",
        __Marshaller_motorModule_Motor_action_param,
        __Marshaller_motorModule_Motor_result);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MotorModule.Motor_event_param, global::MotorModule.Motor_result> __Method_Motor_action_event = new grpc::Method<global::MotorModule.Motor_event_param, global::MotorModule.Motor_result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Motor_action_event",
        __Marshaller_motorModule_Motor_event_param,
        __Marshaller_motorModule_Motor_result);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_transform> __Method_Motor_get_transform = new grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_transform>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Motor_get_transform",
        __Marshaller_motorModule_Void,
        __Marshaller_motorModule_Motor_transform);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_transform> __Method_Motor_get_transform_stream = new grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_transform>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Motor_get_transform_stream",
        __Marshaller_motorModule_Void,
        __Marshaller_motorModule_Motor_transform);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_info> __Method_Motor_get_info = new grpc::Method<global::MotorModule.Void, global::MotorModule.Motor_info>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Motor_get_info",
        __Marshaller_motorModule_Void,
        __Marshaller_motorModule_Motor_info);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MotorModule.MotorModuleReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MotorModule</summary>
    [grpc::BindServiceMethod(typeof(MotorModule), "BindService")]
    public abstract partial class MotorModuleBase
    {
      /// <summary>
      ///  电机动作 .
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MotorModule.Motor_result> Motor_action(global::MotorModule.Motor_action_param request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  电机事件动作.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MotorModule.Motor_result> Motor_action_event(global::MotorModule.Motor_event_param request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  获取所有电机的 transform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MotorModule.Motor_transform> Motor_get_transform(global::MotorModule.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  以流的形式获取电机的 transform.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Motor_get_transform_stream(global::MotorModule.Void request, grpc::IServerStreamWriter<global::MotorModule.Motor_transform> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  获取电机的信息.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MotorModule.Motor_info> Motor_get_info(global::MotorModule.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MotorModule</summary>
    public partial class MotorModuleClient : grpc::ClientBase<MotorModuleClient>
    {
      /// <summary>Creates a new client for MotorModule</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MotorModuleClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MotorModule that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MotorModuleClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MotorModuleClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MotorModuleClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  电机动作 .
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_result Motor_action(global::MotorModule.Motor_action_param request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_action(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  电机动作 .
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_result Motor_action(global::MotorModule.Motor_action_param request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Motor_action, null, options, request);
      }
      /// <summary>
      ///  电机动作 .
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_result> Motor_actionAsync(global::MotorModule.Motor_action_param request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_actionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  电机动作 .
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_result> Motor_actionAsync(global::MotorModule.Motor_action_param request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Motor_action, null, options, request);
      }
      /// <summary>
      ///  电机事件动作.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_result Motor_action_event(global::MotorModule.Motor_event_param request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_action_event(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  电机事件动作.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_result Motor_action_event(global::MotorModule.Motor_event_param request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Motor_action_event, null, options, request);
      }
      /// <summary>
      ///  电机事件动作.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_result> Motor_action_eventAsync(global::MotorModule.Motor_event_param request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_action_eventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  电机事件动作.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_result> Motor_action_eventAsync(global::MotorModule.Motor_event_param request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Motor_action_event, null, options, request);
      }
      /// <summary>
      ///  获取所有电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_transform Motor_get_transform(global::MotorModule.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_get_transform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  获取所有电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_transform Motor_get_transform(global::MotorModule.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Motor_get_transform, null, options, request);
      }
      /// <summary>
      ///  获取所有电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_transform> Motor_get_transformAsync(global::MotorModule.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_get_transformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  获取所有电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_transform> Motor_get_transformAsync(global::MotorModule.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Motor_get_transform, null, options, request);
      }
      /// <summary>
      ///  以流的形式获取电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::MotorModule.Motor_transform> Motor_get_transform_stream(global::MotorModule.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_get_transform_stream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  以流的形式获取电机的 transform.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::MotorModule.Motor_transform> Motor_get_transform_stream(global::MotorModule.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Motor_get_transform_stream, null, options, request);
      }
      /// <summary>
      ///  获取电机的信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_info Motor_get_info(global::MotorModule.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_get_info(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  获取电机的信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MotorModule.Motor_info Motor_get_info(global::MotorModule.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Motor_get_info, null, options, request);
      }
      /// <summary>
      ///  获取电机的信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_info> Motor_get_infoAsync(global::MotorModule.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Motor_get_infoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  获取电机的信息.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MotorModule.Motor_info> Motor_get_infoAsync(global::MotorModule.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Motor_get_info, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MotorModuleClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MotorModuleClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MotorModuleBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Motor_action, serviceImpl.Motor_action)
          .AddMethod(__Method_Motor_action_event, serviceImpl.Motor_action_event)
          .AddMethod(__Method_Motor_get_transform, serviceImpl.Motor_get_transform)
          .AddMethod(__Method_Motor_get_transform_stream, serviceImpl.Motor_get_transform_stream)
          .AddMethod(__Method_Motor_get_info, serviceImpl.Motor_get_info).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MotorModuleBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Motor_action, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotorModule.Motor_action_param, global::MotorModule.Motor_result>(serviceImpl.Motor_action));
      serviceBinder.AddMethod(__Method_Motor_action_event, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotorModule.Motor_event_param, global::MotorModule.Motor_result>(serviceImpl.Motor_action_event));
      serviceBinder.AddMethod(__Method_Motor_get_transform, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotorModule.Void, global::MotorModule.Motor_transform>(serviceImpl.Motor_get_transform));
      serviceBinder.AddMethod(__Method_Motor_get_transform_stream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::MotorModule.Void, global::MotorModule.Motor_transform>(serviceImpl.Motor_get_transform_stream));
      serviceBinder.AddMethod(__Method_Motor_get_info, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotorModule.Void, global::MotorModule.Motor_info>(serviceImpl.Motor_get_info));
    }

  }
}
#endregion
